name: reusable/Docker - ubuntu

permissions:
      id-token: write
      contents: read

concurrency:
  group: 'reusable-docker-images-ubuntu'
  cancel-in-progress: true

on:
  workflow_call:
    inputs:
      AZURE_KEYVAULT_NAME:
        type: string
        description: 'Azure Key Vault name'
        required: false

env:
  DOCKER_IMAGES_PATH: './docker/images'

jobs:
  ubuntu_image:
    runs-on: ubuntu-latest
    steps:
    # Inputs
    - name: 'Show inputs'
      run: |
        echo AZURE_KEYVAULT_NAME : ${{ inputs.AZURE_KEYVAULT_NAME || vars.AZURE_KEYVAULT_NAME }}

    # Variables
    - name: 'Show variables'
      run: |
        echo DOCKER_IMAGES_PATH : ${{ env.DOCKER_IMAGES_PATH }}

    # Prase AZURE_MSI secret
    - name: Prase AZURE_MSI secret
      id: msiPrincipal
      env:
        SECRET: ${{ secrets.AZURE_MSI }}
      run: |
        clientId=$(echo $SECRET | jq -r '.["clientId"]')
        tenantId=$(echo $SECRET | jq -r '.["tenantId"]')
        subscriptionId=$(echo $SECRET | jq -r '.["id"] | split("/")[2]')
        echo "::add-mask::$clientId"
        echo "::add-mask::$tenantId"
        echo "::add-mask::$subscriptionId"
        echo clientId=$clientId >> $GITHUB_OUTPUT
        echo tenantId=$tenantId >> $GITHUB_OUTPUT
        echo subscriptionId=$subscriptionId >> $GITHUB_OUTPUT

    # Login
    - name: 'Azure login'
      uses: azure/login@v1
      with:
        client-id: ${{ steps.msiPrincipal.outputs.clientId }}
        tenant-id: ${{ steps.msiPrincipal.outputs.tenantId }}
        subscription-id: ${{ steps.msiPrincipal.outputs.subscriptionId }}

    # Checkout
    - name: 'Checkout repository branch'
      uses: actions/checkout@v2

    # Key Vault secrets
    - name: 'Get secrets from Key Vault'
      id: keyVaultSecrets
      uses: Azure/get-keyvault-secrets@v1
      with:
        keyvault: ${{ inputs.AZURE_KEYVAULT_NAME || vars.AZURE_KEYVAULT_NAME }}
        secrets: 'azure-registry-server, azure-registry-username, azure-registry-password'

    # ACR login
    - name: 'Login to Container Registry'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ steps.keyVaultSecrets.outputs.azure-registry-server }}
        username: ${{ steps.keyVaultSecrets.outputs.azure-registry-username }}
        password: ${{ steps.keyVaultSecrets.outputs.azure-registry-password }}

    # Deployment
    - name: 'Build and push images'
      shell: bash
      run: |
        pushd '${{ env.DOCKER_IMAGES_PATH }}/ubuntu'
        docker build -f Dockerfile . -t ${{ steps.keyVaultSecrets.outputs.azure-registry-server }}/default/ubuntu:${{ github.sha }}
        docker push ${{ steps.keyVaultSecrets.outputs.azure-registry-server }}/default/ubuntu:${{ github.sha }}
        docker build -f Dockerfile . -t ${{ steps.keyVaultSecrets.outputs.azure-registry-server }}/default/ubuntu:latest
        docker push ${{ steps.keyVaultSecrets.outputs.azure-registry-server }}/default/ubuntu:latest
        popd

    # Logout
    - name: 'Azure logout'
      run: |
        az logout
      if: always()